#ifndef __TIMER_H__
#define __TIMER_H__

#if defined( TIMER_WITH_FOE ) && defined( FOE_WITH_THREAD )
#include "../freeOnExit/freeOnExit.h"
#endif

////////////////////////////////////////////////////////////////////////////////
/// \fn pthread_t * timer ( const uint32_t time, void (*callback)( void * ), 
///     void * arg, const bool argFree );
/// \param[ in ] time : time in Âµseconds
/// \param[ in ] callnback : callback function
/// \param[ in ] arg : callback argument
/// \param[ in ] argFree : boolean to use or not freeOnExit functions
/// \brief set a timer before executin a function
////////////////////////////////////////////////////////////////////////////////
pthread_t * timer ( const uint32_t time, void (*callback)( void * ), void * arg,
	const bool freeOnExit );

////////////////////////////////////////////////////////////////////////////////
/// only one watchdog at time
////////////////////////////////////////////////////////////////////////////////
/// \fn void * intitWatchdog ( const uint16_t time, const bool argFree );
/// \param[ in ] time : watchdog timer before ending in seconds
/// \param[ in ] argFree : boolean to use or not freeOnExit functions
/// \brief init timer but it doesn't run
////////////////////////////////////////////////////////////////////////////////
void * intitWatchdog ( const uint16_t time, const bool argFree );

////////////////////////////////////////////////////////////////////////////////
/// \fn void resetWatchdog ( void );
/// \brief reset timing vaue
////////////////////////////////////////////////////////////////////////////////
void resetWatchdog ( void );

////////////////////////////////////////////////////////////////////////////////
/// \fn void startWatchdog ( void );
/// \brief start down counting
////////////////////////////////////////////////////////////////////////////////
void startWatchdog ( void );

////////////////////////////////////////////////////////////////////////////////
/// \fn void pauseWatchdog ( void );
/// \brief stop down counting
////////////////////////////////////////////////////////////////////////////////
void pauseWatchdog ( void );

////////////////////////////////////////////////////////////////////////////////
/// \fn void stopWatchdog ( void );
/// \brief remove watchdog
////////////////////////////////////////////////////////////////////////////////
void stopWatchdog ( void );

#endif